/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import { DeviceBridgeContext } from "./deviceBridgeContext";

class DeviceBridge extends DeviceBridgeContext {
  /**
   * Initializes a new instance of the DeviceBridge class.
   * @param [options] The parameter options
   */
  constructor(options?: Models.DeviceBridgeOptions) {
    super(options);
  }

  /**
   * For a detailed description of each status, see
   * https://docs.microsoft.com/en-us/dotnet/api/microsoft.azure.devices.client.connectionstatus?view=azure-dotnet.
   * @summary Gets that latest connection status for a device.
   * @param deviceId
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCurrentConnectionStatusResponse>
   */
  getCurrentConnectionStatus(deviceId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetCurrentConnectionStatusResponse>;
  /**
   * @param deviceId
   * @param callback The callback
   */
  getCurrentConnectionStatus(deviceId: string, callback: msRest.ServiceCallback<Models.DeviceStatusResponseBody>): void;
  /**
   * @param deviceId
   * @param options The optional parameters
   * @param callback The callback
   */
  getCurrentConnectionStatus(deviceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeviceStatusResponseBody>): void;
  getCurrentConnectionStatus(deviceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DeviceStatusResponseBody>, callback?: msRest.ServiceCallback<Models.DeviceStatusResponseBody>): Promise<Models.GetCurrentConnectionStatusResponse> {
    return this.sendOperationRequest(
      {
        deviceId,
        options
      },
      getCurrentConnectionStatusOperationSpec,
      callback) as Promise<Models.GetCurrentConnectionStatusResponse>;
  }

  /**
   * @summary Gets the current connection status change subscription for a device.
   * @param deviceId
   * @param [options] The optional parameters
   * @returns Promise<Models.GetConnectionStatusSubscriptionResponse>
   */
  getConnectionStatusSubscription(deviceId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetConnectionStatusSubscriptionResponse>;
  /**
   * @param deviceId
   * @param callback The callback
   */
  getConnectionStatusSubscription(deviceId: string, callback: msRest.ServiceCallback<Models.DeviceSubscription>): void;
  /**
   * @param deviceId
   * @param options The optional parameters
   * @param callback The callback
   */
  getConnectionStatusSubscription(deviceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeviceSubscription>): void;
  getConnectionStatusSubscription(deviceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DeviceSubscription>, callback?: msRest.ServiceCallback<Models.DeviceSubscription>): Promise<Models.GetConnectionStatusSubscriptionResponse> {
    return this.sendOperationRequest(
      {
        deviceId,
        options
      },
      getConnectionStatusSubscriptionOperationSpec,
      callback) as Promise<Models.GetConnectionStatusSubscriptionResponse>;
  }

  /**
   * When the internal connection status of a device changes, the service will send an event to the
   * desired callback URL.
   *
   * Example event:
   * {
   * "eventType": "string",
   * "deviceId": "string",
   * "deviceReceivedAt": "2020-12-04T01:06:14.251Z",
   * "status": "string",
   * "reason": "string"
   * }
   *
   * For a detailed description of each status, see
   * https://docs.microsoft.com/en-us/dotnet/api/microsoft.azure.devices.client.connectionstatus?view=azure-dotnet.
   * @summary Creates or updates the current connection status change subscription for a device.
   * @param deviceId
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateOrUpdateConnectionStatusSubscriptionResponse>
   */
  createOrUpdateConnectionStatusSubscription(deviceId: string, options?: Models.DeviceBridgeCreateOrUpdateConnectionStatusSubscriptionOptionalParams): Promise<Models.CreateOrUpdateConnectionStatusSubscriptionResponse>;
  /**
   * @param deviceId
   * @param callback The callback
   */
  createOrUpdateConnectionStatusSubscription(deviceId: string, callback: msRest.ServiceCallback<Models.DeviceSubscription>): void;
  /**
   * @param deviceId
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateConnectionStatusSubscription(deviceId: string, options: Models.DeviceBridgeCreateOrUpdateConnectionStatusSubscriptionOptionalParams, callback: msRest.ServiceCallback<Models.DeviceSubscription>): void;
  createOrUpdateConnectionStatusSubscription(deviceId: string, options?: Models.DeviceBridgeCreateOrUpdateConnectionStatusSubscriptionOptionalParams | msRest.ServiceCallback<Models.DeviceSubscription>, callback?: msRest.ServiceCallback<Models.DeviceSubscription>): Promise<Models.CreateOrUpdateConnectionStatusSubscriptionResponse> {
    return this.sendOperationRequest(
      {
        deviceId,
        options
      },
      createOrUpdateConnectionStatusSubscriptionOperationSpec,
      callback) as Promise<Models.CreateOrUpdateConnectionStatusSubscriptionResponse>;
  }

  /**
   * @summary Deletes the current connection status change subscription for a device.
   * @param deviceId
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteConnectionStatusSubscription(deviceId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param deviceId
   * @param callback The callback
   */
  deleteConnectionStatusSubscription(deviceId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param deviceId
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteConnectionStatusSubscription(deviceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteConnectionStatusSubscription(deviceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        deviceId,
        options
      },
      deleteConnectionStatusSubscriptionOperationSpec,
      callback);
  }

  /**
   * @summary Gets the current C2D message subscription for a device.
   * @param deviceId
   * @param [options] The optional parameters
   * @returns Promise<Models.GetC2DMessageSubscriptionResponse>
   */
  getC2DMessageSubscription(deviceId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetC2DMessageSubscriptionResponse>;
  /**
   * @param deviceId
   * @param callback The callback
   */
  getC2DMessageSubscription(deviceId: string, callback: msRest.ServiceCallback<Models.DeviceSubscriptionWithStatus>): void;
  /**
   * @param deviceId
   * @param options The optional parameters
   * @param callback The callback
   */
  getC2DMessageSubscription(deviceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeviceSubscriptionWithStatus>): void;
  getC2DMessageSubscription(deviceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DeviceSubscriptionWithStatus>, callback?: msRest.ServiceCallback<Models.DeviceSubscriptionWithStatus>): Promise<Models.GetC2DMessageSubscriptionResponse> {
    return this.sendOperationRequest(
      {
        deviceId,
        options
      },
      getC2DMessageSubscriptionOperationSpec,
      callback) as Promise<Models.GetC2DMessageSubscriptionResponse>;
  }

  /**
   * When the device receives a new C2D message from IoTHub, the service will send an event to the
   * desired callback URL.
   *
   * Example event:
   * {
   * "eventType": "string",
   * "deviceId": "string",
   * "deviceReceivedAt": "2020-12-04T01:06:14.251Z",
   * "messageBody": {},
   * "properties": {
   * "prop1": "string",
   * "prop2": "string",
   * },
   * "messageId": "string",
   * "expirtyTimeUtC": "2020-12-04T01:06:14.251Z"
   * }
   *
   * The response status code of the callback URL will determine how the service will acknowledge a
   * message:
   * - Response code between 200 and 299: the service will complete the message.
   * - Response code between 400 and 499: the service will reject the message.
   * - Any other response status: the service will abandon the message, causing IotHub to redeliver
   * it.
   *
   * For a detailed overview of C2D messages, see
   * https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-messages-c2d.
   * @summary Creates or updates the current C2D message subscription for a device.
   * @param deviceId
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateOrUpdateC2DMessageSubscriptionResponse>
   */
  createOrUpdateC2DMessageSubscription(deviceId: string, options?: Models.DeviceBridgeCreateOrUpdateC2DMessageSubscriptionOptionalParams): Promise<Models.CreateOrUpdateC2DMessageSubscriptionResponse>;
  /**
   * @param deviceId
   * @param callback The callback
   */
  createOrUpdateC2DMessageSubscription(deviceId: string, callback: msRest.ServiceCallback<Models.DeviceSubscriptionWithStatus>): void;
  /**
   * @param deviceId
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateC2DMessageSubscription(deviceId: string, options: Models.DeviceBridgeCreateOrUpdateC2DMessageSubscriptionOptionalParams, callback: msRest.ServiceCallback<Models.DeviceSubscriptionWithStatus>): void;
  createOrUpdateC2DMessageSubscription(deviceId: string, options?: Models.DeviceBridgeCreateOrUpdateC2DMessageSubscriptionOptionalParams | msRest.ServiceCallback<Models.DeviceSubscriptionWithStatus>, callback?: msRest.ServiceCallback<Models.DeviceSubscriptionWithStatus>): Promise<Models.CreateOrUpdateC2DMessageSubscriptionResponse> {
    return this.sendOperationRequest(
      {
        deviceId,
        options
      },
      createOrUpdateC2DMessageSubscriptionOperationSpec,
      callback) as Promise<Models.CreateOrUpdateC2DMessageSubscriptionResponse>;
  }

  /**
   * @summary Deletes the current C2D message subscription for a device.
   * @param deviceId
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteC2DMessageSubscription(deviceId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param deviceId
   * @param callback The callback
   */
  deleteC2DMessageSubscription(deviceId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param deviceId
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteC2DMessageSubscription(deviceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteC2DMessageSubscription(deviceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        deviceId,
        options
      },
      deleteC2DMessageSubscriptionOperationSpec,
      callback);
  }

  /**
   * Example request:
   *
   * POST /devices/{deviceId}/messages/events
   * {
   * "data": {
   * "temperature": 4.8,
   * "humidity": 31
   * }
   * }
   * .
   * @summary Sends a device message to IoTHub.
   * @param deviceId
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  sendMessage(deviceId: string, options?: Models.DeviceBridgeSendMessageOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param deviceId
   * @param callback The callback
   */
  sendMessage(deviceId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param deviceId
   * @param options The optional parameters
   * @param callback The callback
   */
  sendMessage(deviceId: string, options: Models.DeviceBridgeSendMessageOptionalParams, callback: msRest.ServiceCallback<void>): void;
  sendMessage(deviceId: string, options?: Models.DeviceBridgeSendMessageOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        deviceId,
        options
      },
      sendMessageOperationSpec,
      callback);
  }

  /**
   * @summary Gets the current direct methods subscription for a device.
   * @param deviceId
   * @param [options] The optional parameters
   * @returns Promise<Models.GetMethodsSubscriptionResponse>
   */
  getMethodsSubscription(deviceId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetMethodsSubscriptionResponse>;
  /**
   * @param deviceId
   * @param callback The callback
   */
  getMethodsSubscription(deviceId: string, callback: msRest.ServiceCallback<Models.DeviceSubscriptionWithStatus>): void;
  /**
   * @param deviceId
   * @param options The optional parameters
   * @param callback The callback
   */
  getMethodsSubscription(deviceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeviceSubscriptionWithStatus>): void;
  getMethodsSubscription(deviceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DeviceSubscriptionWithStatus>, callback?: msRest.ServiceCallback<Models.DeviceSubscriptionWithStatus>): Promise<Models.GetMethodsSubscriptionResponse> {
    return this.sendOperationRequest(
      {
        deviceId,
        options
      },
      getMethodsSubscriptionOperationSpec,
      callback) as Promise<Models.GetMethodsSubscriptionResponse>;
  }

  /**
   * When the device receives a direct method invocation from IoTHub, the service will send an event
   * to the desired callback URL.
   *
   * Example event:
   * {
   * "eventType": "string",
   * "deviceId": "string",
   * "deviceReceivedAt": "2020-12-04T01:06:14.251Z",
   * "methodName": "string",
   * "requestData": {}
   * }
   *
   * The callback may return an optional response body, which will be sent to IoTHub as the method
   * response:
   *
   * Example callback response:
   * {
   * "status": "string",
   * "payload": {}
   * }
   * .
   * @summary Creates or updates the current direct methods subscription for a device.
   * @param deviceId
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateOrUpdateMethodsSubscriptionResponse>
   */
  createOrUpdateMethodsSubscription(deviceId: string, options?: Models.DeviceBridgeCreateOrUpdateMethodsSubscriptionOptionalParams): Promise<Models.CreateOrUpdateMethodsSubscriptionResponse>;
  /**
   * @param deviceId
   * @param callback The callback
   */
  createOrUpdateMethodsSubscription(deviceId: string, callback: msRest.ServiceCallback<Models.DeviceSubscriptionWithStatus>): void;
  /**
   * @param deviceId
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateMethodsSubscription(deviceId: string, options: Models.DeviceBridgeCreateOrUpdateMethodsSubscriptionOptionalParams, callback: msRest.ServiceCallback<Models.DeviceSubscriptionWithStatus>): void;
  createOrUpdateMethodsSubscription(deviceId: string, options?: Models.DeviceBridgeCreateOrUpdateMethodsSubscriptionOptionalParams | msRest.ServiceCallback<Models.DeviceSubscriptionWithStatus>, callback?: msRest.ServiceCallback<Models.DeviceSubscriptionWithStatus>): Promise<Models.CreateOrUpdateMethodsSubscriptionResponse> {
    return this.sendOperationRequest(
      {
        deviceId,
        options
      },
      createOrUpdateMethodsSubscriptionOperationSpec,
      callback) as Promise<Models.CreateOrUpdateMethodsSubscriptionResponse>;
  }

  /**
   * @summary Deletes the current direct methods subscription for a device.
   * @param deviceId
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethodsSubscription(deviceId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param deviceId
   * @param callback The callback
   */
  deleteMethodsSubscription(deviceId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param deviceId
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethodsSubscription(deviceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethodsSubscription(deviceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        deviceId,
        options
      },
      deleteMethodsSubscriptionOperationSpec,
      callback);
  }

  /**
   * The registration result is internally cached to be used in future connections.
   * This route is only intended for ahead-of-time registration of devices with the bridge and
   * assignment to a specific model. To access all DPS registration features,
   * including sending custom registration payload and getting the assigned hub, please use the DPS
   * REST API (https://docs.microsoft.com/en-us/rest/api/iot-dps/).
   *
   * <b>NOTE:</b> DPS registration is a long-running operation, so calls to this route may take a
   * long time to return. If this is a concern, use the DPS REST API directly, which provides
   * support for long-running operation status lookup.
   * @summary Performs DPS registration for a device, optionally assigning it to a model.
   * @param deviceId
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  register(deviceId: string, options?: Models.DeviceBridgeRegisterOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param deviceId
   * @param callback The callback
   */
  register(deviceId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param deviceId
   * @param options The optional parameters
   * @param callback The callback
   */
  register(deviceId: string, options: Models.DeviceBridgeRegisterOptionalParams, callback: msRest.ServiceCallback<void>): void;
  register(deviceId: string, options?: Models.DeviceBridgeRegisterOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        deviceId,
        options
      },
      registerOperationSpec,
      callback);
  }

  /**
   * Internally it forces the reconnection of the device if it's in a permanent failure state, due
   * for instance to:
   * - Bad credentials.
   * - Device was previously disabled in the cloud side.
   * - Automatic retries expired (e.g., due to a long period without network connectivity).
   * @summary Forces a full synchronization of all subscriptions for this device and attempts to
   * restart any subscriptions in a stopped state.
   * @param deviceId
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  resync(deviceId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param deviceId
   * @param callback The callback
   */
  resync(deviceId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param deviceId
   * @param options The optional parameters
   * @param callback The callback
   */
  resync(deviceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  resync(deviceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        deviceId,
        options
      },
      resyncOperationSpec,
      callback);
  }

  /**
   * @summary Gets the device twin.
   * @param deviceId
   * @param [options] The optional parameters
   * @returns Promise<Models.GetTwinResponse>
   */
  getTwin(deviceId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetTwinResponse>;
  /**
   * @param deviceId
   * @param callback The callback
   */
  getTwin(deviceId: string, callback: msRest.ServiceCallback<Models.GetTwinOKResponse>): void;
  /**
   * @param deviceId
   * @param options The optional parameters
   * @param callback The callback
   */
  getTwin(deviceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GetTwinOKResponse>): void;
  getTwin(deviceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.GetTwinOKResponse>, callback?: msRest.ServiceCallback<Models.GetTwinOKResponse>): Promise<Models.GetTwinResponse> {
    return this.sendOperationRequest(
      {
        deviceId,
        options
      },
      getTwinOperationSpec,
      callback) as Promise<Models.GetTwinResponse>;
  }

  /**
   * Example request:
   *
   * PATCH /devices/{deviceId}/properties/reported
   * {
   * "patch": {
   * "fanSpeed": 35,
   * "serial": "ABC"
   * }
   * }
   * .
   * @summary Updates reported properties in the device twin.
   * @param deviceId
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  updateReportedProperties(deviceId: string, options?: Models.DeviceBridgeUpdateReportedPropertiesOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param deviceId
   * @param callback The callback
   */
  updateReportedProperties(deviceId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param deviceId
   * @param options The optional parameters
   * @param callback The callback
   */
  updateReportedProperties(deviceId: string, options: Models.DeviceBridgeUpdateReportedPropertiesOptionalParams, callback: msRest.ServiceCallback<void>): void;
  updateReportedProperties(deviceId: string, options?: Models.DeviceBridgeUpdateReportedPropertiesOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        deviceId,
        options
      },
      updateReportedPropertiesOperationSpec,
      callback);
  }

  /**
   * @summary Gets the current desired property change subscription for a device.
   * @param deviceId
   * @param [options] The optional parameters
   * @returns Promise<Models.GetDesiredPropertiesSubscriptionResponse>
   */
  getDesiredPropertiesSubscription(deviceId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetDesiredPropertiesSubscriptionResponse>;
  /**
   * @param deviceId
   * @param callback The callback
   */
  getDesiredPropertiesSubscription(deviceId: string, callback: msRest.ServiceCallback<Models.DeviceSubscriptionWithStatus>): void;
  /**
   * @param deviceId
   * @param options The optional parameters
   * @param callback The callback
   */
  getDesiredPropertiesSubscription(deviceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeviceSubscriptionWithStatus>): void;
  getDesiredPropertiesSubscription(deviceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DeviceSubscriptionWithStatus>, callback?: msRest.ServiceCallback<Models.DeviceSubscriptionWithStatus>): Promise<Models.GetDesiredPropertiesSubscriptionResponse> {
    return this.sendOperationRequest(
      {
        deviceId,
        options
      },
      getDesiredPropertiesSubscriptionOperationSpec,
      callback) as Promise<Models.GetDesiredPropertiesSubscriptionResponse>;
  }

  /**
   * When the device receives a new desired property change from IoTHub, the service will send an
   * event to the desired callback URL.
   *
   * Example event:
   * {
   * "eventType": "string",
   * "deviceId": "string",
   * "deviceReceivedAt": "2020-12-04T01:06:14.251Z",
   * "desiredProperties": {
   * "prop1": "string",
   * "prop2": 12,
   * "prop3": {},
   * }
   * }
   * .
   * @summary Creates or updates the current desired property change subscription for a device.
   * @param deviceId
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateOrUpdateDesiredPropertiesSubscriptionResponse>
   */
  createOrUpdateDesiredPropertiesSubscription(deviceId: string, options?: Models.DeviceBridgeCreateOrUpdateDesiredPropertiesSubscriptionOptionalParams): Promise<Models.CreateOrUpdateDesiredPropertiesSubscriptionResponse>;
  /**
   * @param deviceId
   * @param callback The callback
   */
  createOrUpdateDesiredPropertiesSubscription(deviceId: string, callback: msRest.ServiceCallback<Models.DeviceSubscriptionWithStatus>): void;
  /**
   * @param deviceId
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateDesiredPropertiesSubscription(deviceId: string, options: Models.DeviceBridgeCreateOrUpdateDesiredPropertiesSubscriptionOptionalParams, callback: msRest.ServiceCallback<Models.DeviceSubscriptionWithStatus>): void;
  createOrUpdateDesiredPropertiesSubscription(deviceId: string, options?: Models.DeviceBridgeCreateOrUpdateDesiredPropertiesSubscriptionOptionalParams | msRest.ServiceCallback<Models.DeviceSubscriptionWithStatus>, callback?: msRest.ServiceCallback<Models.DeviceSubscriptionWithStatus>): Promise<Models.CreateOrUpdateDesiredPropertiesSubscriptionResponse> {
    return this.sendOperationRequest(
      {
        deviceId,
        options
      },
      createOrUpdateDesiredPropertiesSubscriptionOperationSpec,
      callback) as Promise<Models.CreateOrUpdateDesiredPropertiesSubscriptionResponse>;
  }

  /**
   * @summary Deletes the current desired property change subscription for a device.
   * @param deviceId
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteDesiredPropertiesSubscription(deviceId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param deviceId
   * @param callback The callback
   */
  deleteDesiredPropertiesSubscription(deviceId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param deviceId
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteDesiredPropertiesSubscription(deviceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteDesiredPropertiesSubscription(deviceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        deviceId,
        options
      },
      deleteDesiredPropertiesSubscriptionOperationSpec,
      callback);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getCurrentConnectionStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "devices/{deviceId}/ConnectionStatus",
  urlParameters: [
    Parameters.deviceId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeviceStatusResponseBody
    },
    404: {},
    default: {}
  },
  serializer
};

const getConnectionStatusSubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "devices/{deviceId}/ConnectionStatus/sub",
  urlParameters: [
    Parameters.deviceId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeviceSubscription
    },
    404: {},
    default: {}
  },
  serializer
};

const createOrUpdateConnectionStatusSubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "devices/{deviceId}/ConnectionStatus/sub",
  urlParameters: [
    Parameters.deviceId
  ],
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.SubscriptionCreateOrUpdateBody
  },
  responses: {
    200: {
      bodyMapper: Mappers.DeviceSubscription
    },
    default: {}
  },
  serializer
};

const deleteConnectionStatusSubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "devices/{deviceId}/ConnectionStatus/sub",
  urlParameters: [
    Parameters.deviceId
  ],
  responses: {
    204: {},
    default: {}
  },
  serializer
};

const getC2DMessageSubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "devices/{deviceId}/DeviceBound/sub",
  urlParameters: [
    Parameters.deviceId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeviceSubscriptionWithStatus
    },
    404: {},
    default: {}
  },
  serializer
};

const createOrUpdateC2DMessageSubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "devices/{deviceId}/DeviceBound/sub",
  urlParameters: [
    Parameters.deviceId
  ],
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.SubscriptionCreateOrUpdateBody
  },
  responses: {
    200: {
      bodyMapper: Mappers.DeviceSubscriptionWithStatus
    },
    default: {}
  },
  serializer
};

const deleteC2DMessageSubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "devices/{deviceId}/DeviceBound/sub",
  urlParameters: [
    Parameters.deviceId
  ],
  responses: {
    204: {},
    default: {}
  },
  serializer
};

const sendMessageOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "devices/{deviceId}/Messages/events",
  urlParameters: [
    Parameters.deviceId
  ],
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.MessageBody
  },
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const getMethodsSubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "devices/{deviceId}/Methods/sub",
  urlParameters: [
    Parameters.deviceId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeviceSubscriptionWithStatus
    },
    404: {},
    default: {}
  },
  serializer
};

const createOrUpdateMethodsSubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "devices/{deviceId}/Methods/sub",
  urlParameters: [
    Parameters.deviceId
  ],
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.SubscriptionCreateOrUpdateBody
  },
  responses: {
    200: {
      bodyMapper: Mappers.DeviceSubscriptionWithStatus
    },
    default: {}
  },
  serializer
};

const deleteMethodsSubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "devices/{deviceId}/Methods/sub",
  urlParameters: [
    Parameters.deviceId
  ],
  responses: {
    204: {},
    default: {}
  },
  serializer
};

const registerOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "devices/{deviceId}/Registration",
  urlParameters: [
    Parameters.deviceId
  ],
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.RegistrationBody
  },
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const resyncOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "devices/{deviceId}/Resync",
  urlParameters: [
    Parameters.deviceId
  ],
  responses: {
    202: {},
    default: {}
  },
  serializer
};

const getTwinOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "devices/{deviceId}/Twin",
  urlParameters: [
    Parameters.deviceId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetTwinOKResponse
    },
    default: {}
  },
  serializer
};

const updateReportedPropertiesOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "devices/{deviceId}/Twin/properties/reported",
  urlParameters: [
    Parameters.deviceId
  ],
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.ReportedPropertiesPatch
  },
  responses: {
    204: {},
    default: {}
  },
  serializer
};

const getDesiredPropertiesSubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "devices/{deviceId}/Twin/properties/desired/sub",
  urlParameters: [
    Parameters.deviceId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeviceSubscriptionWithStatus
    },
    404: {},
    default: {}
  },
  serializer
};

const createOrUpdateDesiredPropertiesSubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "devices/{deviceId}/Twin/properties/desired/sub",
  urlParameters: [
    Parameters.deviceId
  ],
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.SubscriptionCreateOrUpdateBody
  },
  responses: {
    200: {
      bodyMapper: Mappers.DeviceSubscriptionWithStatus
    },
    default: {}
  },
  serializer
};

const deleteDesiredPropertiesSubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "devices/{deviceId}/Twin/properties/desired/sub",
  urlParameters: [
    Parameters.deviceId
  ],
  responses: {
    204: {},
    default: {}
  },
  serializer
};

export {
  DeviceBridge,
  DeviceBridgeContext,
  Models as DeviceBridgeModels,
  Mappers as DeviceBridgeMappers
};
