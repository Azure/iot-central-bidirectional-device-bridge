/* Copyright (c) Microsoft Corporation.  All rights reserved.*/

/**
 * Sample adapter for the Device Bridge written in TypeScript to forward D2C messages to Event Hub.
 * This sample uses a client automatically generated by autorest using the Device Bridge swagger.
 * Failures are logged in the same Log Analytics workspace used by the Bridge core module.
 * APIs:
 * 
 *  POST /subscribe/{deviceId}
 *    Creates a C2D message subscription for a device and forwards all C2D messages to an EventHub.
 * 
 *  POST /unsubscribe/{deviceId}
 *    Deletes the C2D message subscription for a device and stops publishing events.
 * 
 * NOTE: this code should only be used as a sample reference for how to build adapters for the
 * Device Bridge. It should not be used in a production setting without proper testing and error
 * handling.
 */

import express from 'express';
import bodyParser from 'body-parser';
import { EventHubProducerClient } from "@azure/event-hubs";

import { DeviceBridge } from './autorest/src/deviceBridge';

const BridgePort = process.env['BRIDGE_PORT'] || 5001;
const InternalPort = process.env['INTERNAL_PORT'] || 3001;
const ExternalPort = process.env['EXTERNAL_PORT'] || 3000;
const callbackUrl = `http://localhost:${InternalPort}/c2d_message`;
const ApiKeyHeaderName = 'x-api-key';
const connectionString = process.env['EVENTHUB_CONNECTION_STRING'];
const eventHubName = process.env['EVENTHUB_NAME'];
const bridge = new DeviceBridge({ baseUri: `http://localhost:${BridgePort}` });
const producer = new EventHubProducerClient(connectionString, eventHubName);

const externalApp = express();

// Forward "subscribe" operations as a C2D message subscription creation to the bridge
externalApp.post('/subscribe/:deviceId', async (req, res, next) => {
    const deviceId = req.params.deviceId;
    const clientApiKey = req.header(ApiKeyHeaderName);

    try {
        LogInfo(`Subscribe request for device: ${deviceId}`, { deviceId });

        if (!clientApiKey) {
            res.sendStatus(401);
        }

        await bridge.createOrUpdateC2DMessageSubscription(deviceId, {
            body: {
                callbackUrl
            },
            customHeaders: {
                [ApiKeyHeaderName]: clientApiKey // Forward the API key header to let the Bridge handle the auth
            }
        });

        res.sendStatus(200);
    } catch (e) {
        LogError('Unknown request error', e, { deviceId });
        next(new Error('Unknown request error'));
    }
});

// Forward "unsubscribe" operations as a C2D message subscription deletion to the bridge
externalApp.post('/unsubscribe/:deviceId', async (req, res, next) => {
    const deviceId = req.params.deviceId;
    const clientApiKey = req.header(ApiKeyHeaderName);

    try {
        LogInfo(`Unsubscribe request for device: ${deviceId}`, { deviceId });

        if (!clientApiKey) {
            res.sendStatus(401);
        }

        await bridge.deleteC2DMessageSubscription(deviceId, {
            customHeaders: {
                [ApiKeyHeaderName]: clientApiKey // Forward the API key header to let the Bridge handle the auth
            }
        });

        res.sendStatus(200);
    } catch (e) {
        LogError('Unknown request error', e, { deviceId });
        next(new Error('Unknown request error'));
    }
});

externalApp.listen(ExternalPort, () => {
    LogInfo(`External server listening at http://localhost:${ExternalPort}`)
});

const internalApp = express();
internalApp.use(bodyParser.json());

internalApp.post('/c2d_message', async (req, res, next) => {
    const deviceId = req.body.deviceId;

    if (typeof deviceId !== 'string') {
        LogError('Missing deviceId in event body');
        res.sendStatus(400);
    }

    if (req.body.eventType !== 'C2DMessage') {
        LogError('Unknown event type');
        res.sendStatus(400);
    }

    try {
        LogInfo(`C2D message for device: ${deviceId}`, { deviceId });
        const batch = await producer.createBatch();
        const isAdded = batch.tryAdd({ body: req.body });

        if (isAdded) {
            await producer.sendBatch(batch);
            LogInfo(`C2D message successfully published to EventHub for device: ${deviceId}`, { deviceId });
        } else {
            LogError('Unable to add message', undefined, { deviceId });
            res.sendStatus(500);
        }

        res.sendStatus(200);
    } catch (e) {
        LogError('Unknown request error', e, { deviceId });
        next(new Error('Unknown request error'));
    }
});

internalApp.listen(InternalPort, () => {
    LogInfo(`Internal server listening at http://localhost:${InternalPort}`)
});

function LogInfo(message: string, metadata?: any) {
    console.log(JSON.stringify({
        ...metadata,
        level: 'INFO',
        message
    }));
}

function LogError(message: string, exception?: Error, metadata?: any) {
    console.log(JSON.stringify({
        ...metadata,
        level: 'ERROR',
        message,
        exception
    }));
}